#pragma once
#include <utility>
#include <initializer_list>
#include <vector>
#include <algorithm>
#include <iostream>
#include <string>
#include <sstream>
#include <random>
#include "extended_array.h"

template <typename T1, typename T2>
void AssertEq(T1 valueA, T2 valueB) {
	if (valueA != valueB) {
		std::ostringstream err;
		err << "Assertion failed: " << valueA << " != " << valueB;
		throw std::runtime_error(err.str());
	}
}



//Тестирование функции бинарного массива:
template <typename T>
void checkSumTest(ExtArray<T> a, int sum) {


	try {
		AssertEq(a.checkSum(), sum);
		std::cout << "Expected value: " << sum << std::endl;
		std::cout << "Generated by function value: " << a.checkSum() << std::endl;
		std::cerr << "checkSum function is OK" << std::endl;
	}

	catch (std::runtime_error& e) {
		std::cerr << "checkSum function is WRONG" << std::endl;
	}

	catch (std::bad_typeid& err) {
		std::cerr << "Type of array elements must be int or bool." << std::endl;
	}

	catch (std::logic_error& err) {
		std::cerr << "0 and 1 are only possible values." << std::endl;
	}


	std::cout << std::endl;
}